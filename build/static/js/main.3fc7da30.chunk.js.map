{"version":3,"sources":["components/Product.module.css","components/ReturnForm.module.css","components/ProductList.module.css","components/Refund.module.css","components/Notification.module.css","components/Title.module.css","components/ReturnForm.js","components/Product.js","components/ProductList.js","components/Refund.js","components/Notification.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ReturnForm","setRefund","setReturnableProducts","setNotification","useState","id","setIdInput","checkProductReturn","event","a","preventDefault","headers","body","JSON","stringify","fetch","method","res","json","response","error","refund","products","onSubmit","className","styles","form","type","aria-label","placeholder","value","onChange","target","Product","product","name","price","quantity","ProductList","productList","list","map","key","Refund","container","Notification","notification","text","Title","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3fc7da30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"Product_product__l3EVN\",\"name\":\"Product_name__37Rc9\",\"quantity\":\"Product_quantity__2l-iA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ReturnForm_form__2slJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ProductList_list__1vPAp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Refund_container__pXZSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__3WTIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__5WKxX\"};","import React, {useState} from 'react';\nimport styles from './ReturnForm.module.css';\n\nconst ReturnForm = ({setRefund, setReturnableProducts, setNotification}) => {\n  const [id, setIdInput] = useState('')\n\n  /*Make an api request to check\n  which products of a transaction can be returned and\n  what the total refund will be*/\n  const checkProductReturn = async event => {\n    event.preventDefault()\n\n    //Clear any data displayed from previous request\n    setNotification(null)\n    setReturnableProducts([])\n    setRefund(0)\n\n    const headers = {\n      'Content-Type': 'application/json'\n    }\n    \n    const body = JSON.stringify({id})\n    \n    const res = await fetch('http://localhost:5000/api/transaction/return', {\n      headers,\n      body,\n      method: 'POST'\n    })\n\n    const response = await res.json()\n\n    //Check for error and update state accordingly \n    if (response.error) {\n      setNotification(response.error)\n    } else {\n      setRefund(response.refund)\n      setReturnableProducts(response.products)\n    }\n  }\n\n  return (\n    <form onSubmit={checkProductReturn} className={styles.form}>\n      <input \n        type=\"text\" \n        aria-label=\"transaction id\" \n        placeholder=\"Enter transaction id\"\n        value={id}\n        onChange={event => setIdInput(event.target.value)}/>\n      <button>Submit</button>\n    </form>\n  )\n}\n\nexport default ReturnForm","import React from 'react';\nimport styles from './Product.module.css';\n\nconst Product = ({product}) => {\n  return (\n    <li className={styles.product}>\n      <span className={styles.name}>{product.name}</span>\n      <span className={styles.price}>Price: ${product.price}</span>\n      <span className={styles.quantity}>Quantity: {product.quantity}</span>\n    </li>\n  )\n}\n\nexport default Product","import React from 'react';\nimport styles from './ProductList.module.css';\n\nimport Product from './Product'\n\nconst ProductList = ({productList}) => {\n  return (\n    <ul className={styles.list}>\n      {productList.map(product => {\n        return <Product product={product} key={product.id}/>\n      })}\n    </ul>\n  )\n}\n\nexport default ProductList","import React from 'react';\nimport styles from './Refund.module.css';\n\nconst Refund = ({refund}) => {\n  return (\n    <footer className={styles.container}>\n      <p>Total Refund: ${refund}</p>\n    </footer>\n  )\n}\n\nexport default Refund","import React from 'react';\nimport styles from './Notification.module.css';\n\nconst Notification = ({notification}) => {\n  if (!notification) {\n    return null\n  } \n\n  return <h3 className={styles.text}>{notification}</h3>\n}\n\nexport default Notification","import React from 'react';\nimport styles from './Title.module.css';\n\nconst Title = () => {\n  return <h1 className={styles.title}>Product Returns</h1>\n}\n\nexport default Title","import React, {useState} from 'react';\n\nimport ReturnForm from './components/ReturnForm'\nimport ProductList from './components/ProductList'\nimport Refund from './components/Refund'\nimport Notification from './components/Notification'\nimport Title from './components/Title'\n\nfunction App() {\n  const [productList, setReturnableProducts] = useState([])\n  const [refund, setRefund] = useState(0)\n  const [notification, setNotification] = useState(null)\n\n  return (\n    <main className=\"App\">\n      <Title/>\n      <ReturnForm \n        setReturnableProducts={setReturnableProducts}\n        setRefund={setRefund}\n        setNotification={setNotification}/>\n      <Notification notification={notification}/>\n      <ProductList productList={productList}/>\n      <Refund refund={refund}/>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}